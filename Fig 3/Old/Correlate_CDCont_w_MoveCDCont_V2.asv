% Relating CDContext and MOVECDContext to each other at the single trial level
clear,clc,close all

% add paths for data loading scripts, all fig funcs, and utils
utilspth = 'C:\Users\Jackie\Documents\Grad School\Economo Lab\Code\Munib Uninstruct Move\uninstructedMovements_v2';
addpath(genpath(fullfile(utilspth,'DataLoadingScripts')));
addpath(genpath(fullfile(utilspth,'funcs')));
addpath(genpath(fullfile(utilspth,'utils')));
addpath(genpath(fullfile(utilspth,'fig1')));
figpth = 'C:\Users\Jackie\Documents\Grad School\Economo Lab\Code\Uninstructed-Movements\Fig 4';
addpath(genpath(fullfile(figpth,'funcs')));
figpth = 'C:\Users\Jackie\Documents\Grad School\Economo Lab\Code\Uninstructed-Movements\Fig 3';
addpath(genpath(fullfile(figpth,'funcs')));

%% PARAMETERS
params.alignEvent          = 'goCue'; % 'jawOnset' 'goCue'  'moveOnset'  'firstLick'  'lastLick'

% time warping only operates on neural data for now.
% TODO: time warp for video and bpod data
params.timeWarp            = 0;  % piecewise linear time warping - each lick duration on each trial gets warped to median lick duration for that lick across trials
params.nLicks              = 20; % number of post go cue licks to calculate median lick duration for and warp individual trials to

params.lowFR               = 1; % remove clusters with firing rates across all trials less than this val

% set conditions to calculate PSTHs for
params.condition(1)     = {'(hit|miss|no)'};                             % all trials
params.condition(end+1) = {'~no&~stim.enable&~autowater&~early'};               % 2AFC response trials, no stim
params.condition(end+1) = {'~no&~stim.enable&autowater&~early'};                % AW hits response trials, no stim

params.tmin = -3;
params.tmax = 2.5;
params.dt = 1/100;

% smooth with causal gaussian kernel
params.smooth = 15;

% cluster qualities to use
params.quality = {'all'}; % accepts any cell array of strings - special character 'all' returns clusters of any quality


params.traj_features = {{'tongue','left_tongue','right_tongue','jaw','trident','nose'},...
    {'top_tongue','topleft_tongue','bottom_tongue','bottomleft_tongue','jaw','top_nostril','bottom_nostril'}};

params.feat_varToExplain = 80; % num factors for dim reduction of video features should explain this much variance

params.N_varToExplain = 80; % keep num dims that explains this much variance in neural data (when doing n/p)

params.advance_movement = 0;

params.bctype = 'reflect'; % options are : reflect  zeropad  none
%% SPECIFY DATA TO LOAD

datapth = 'C:\Users\Jackie\Documents\Grad School\Economo Lab';

meta = [];

% --- ALM ---
meta = loadJEB6_ALMVideo(meta,datapth);
meta = loadJEB7_ALMVideo(meta,datapth);
meta = loadEKH1_ALMVideo(meta,datapth);
meta = loadEKH3_ALMVideo(meta,datapth);
meta = loadJGR2_ALMVideo(meta,datapth);
meta = loadJGR3_ALMVideo(meta,datapth);

params.probe = {meta.probe}; % put probe numbers into params, one entry for element in meta, just so i don't have to change code i've already written
%% LOAD DATA

% ----------------------------------------------
% -- Neural Data --
% obj (struct array) - one entry per session
% params (struct array) - one entry per session
% ----------------------------------------------
[obj,params] = loadSessionData(meta,params);

% ------------------------------------------
% -- Motion Energy --
% me (struct array) - one entry per session
% ------------------------------------------
for sessix = 1:numel(meta)
    me(sessix) = loadMotionEnergy(obj(sessix), meta(sessix), params(sessix), datapth);
end

%% Load kinematic data
nSessions = numel(meta);
for sessix = 1:numel(meta)
    message = strcat('----Getting kinematic data for session',{' '},num2str(sessix), {' '},'out of',{' '},num2str(nSessions),'----');
    disp(message)
    kin(sessix) = getKinematics(obj(sessix), me(sessix), params(sessix));
end
%% Calculate MOVE-CDCont and find single trial projections
clearvars -except obj meta params me sav kin

disp('----Calculating MoveCDContext Mode----')
cond2use = [2,3];
cond2proj = [2,3];
regr = getMovement_CDContext(obj,params,cond2use,cond2proj,kin,'standardize');

disp('----Projecting single trials of movement onto MoveCDContext----')
cd = 'context';
regr = getMove_SingleTrialProjs(regr,obj,cd,kin);
%% Calculate CDCont and find single trial projections

disp('----Calculating CDContext Mode----')
cond2use = [2,3];
cond2proj = [2,3];
neur = getCodingDimensions_aw(obj,params,cond2use,cond2proj);

disp('----Projecting single trials of movement onto CDContext----')
cd = 'context';
neur = getSingleTrialProjs(neur,obj,cd,'nonorthog');
%% Plot heatmap of single-trial MOVE-CDContext over the course of the session
load('C:\Users\Jackie\Documents\Grad School\Economo Lab\Code\Uninstructed-Movements\ContextColormap.mat');

% 1,2,5 = best sessions
sessrange = [1,2,5];
tmax = 0;                               % what you want max of xlim to be
for sessix = 2%sessrange
    figure();
    nTrials = size(regr(sessix).singleMoveCDProj,2);
    imagesc(obj(1).time,1:nTrials,regr(sessix).singleMoveCDProj'); c = colorbar;  colormap(flipud(ContextColormap))
%     if sessix == 1
%         clim([-5 4])
%     elseif sessix == 2
%         clim([-4 5])
%     elseif sessix == 5
%         clim([-3 4])
%     end
    clim([-4 4])
    xlim([-2.5, tmax])
    ylabel('Trials within session')
    xlabel('Time from go cue (s)')

    triallabel = obj(sessix).bp.autowater;              % Get the label for each trial as autowater or 2AFC
    hold on;
    Nplotted = 0;
    for j = 1:length(triallabel)
        Nplotted = Nplotted+1;
        if triallabel(j)==0                                                         % If a 2AFC trial, plot a black rectangle on the side
            plot([0 0]+(tmax-0.05), -0.5+Nplotted+[0.1 0.9], 'Color',[0.75 0.75 0.75], 'LineWidth', 10);
        end
        if triallabel(j)==1                                                         % If an AW trial, plot a magenta rectangle on the side
            plot([0 0]+(tmax-0.05), -0.5+Nplotted+[0.1 0.9], 'magenta', 'LineWidth', 10);
        end
    end
    ylabel(c,'Move-CDContext','FontSize',12,'Rotation',90);
end
%% Plot heatmap of single trial CDContext over the course of the session
% 1,2,5 = best sessions
sessrange = [1,2,5];
tmax = 0;                               % what you want max of xlim to be
for sessix = 2%sessrange
    figure();
    nTrials = size(neur(sessix).singleProj,2);
    imagesc(obj(1).time,1:nTrials,neur(sessix).singleProj'); c = colorbar; colormap(flipuContextColormap)
%     if sessix == 1
%         clim([-5 4])
%     elseif sessix == 2
%         clim([-4 5])
%     elseif sessix == 5
%         clim([-3 4])
%     end
    clim([-25 5])
    xlim([-2.5, tmax])
    ylabel('Trials within session')
    xlabel('Time from go cue (s)')

    triallabel = obj(sessix).bp.autowater;              % Get the label for each trial as autowater or 2AFC
    hold on;
    Nplotted = 0;
    for j = 1:length(triallabel)
        Nplotted = Nplotted+1;
        if triallabel(j)==0                                                         % If a 2AFC trial, plot a black rectangle on the side
            plot([0 0]+(tmax-0.05), -0.5+Nplotted+[0.1 0.9], 'Color',[0.75 0.75 0.75], 'LineWidth', 10);
        end
        if triallabel(j)==1                                                         % If an AW trial, plot a magenta rectangle on the side
            plot([0 0]+(tmax-0.05), -0.5+Nplotted+[0.1 0.9], 'magenta', 'LineWidth', 10);
        end
    end
    ylabel(c,'CDContext','FontSize',12,'Rotation',90);
end
%% Find avg CDCont and MOVE-CDCont during the presample period on each trial
% Time period over which you want to average CDContext
trialstart = median(obj(1).bp.ev.bitStart)-median(obj(1).bp.ev.(params(1).alignEvent));
start = find(obj(1).time>trialstart,1,'first');
samp = median(obj(1).bp.ev.sample)-median(obj(1).bp.ev.(params(1).alignEvent));
stop = find(obj(1).time<samp,1,'last');

% Take the presample average; normalize to max value
for sessix = 1:length(meta)
     temp = mean(regr(sessix).singleMoveCDProj(start:stop,:),1,'omitnan');
     regr(sessix).presampAvg = temp./(max(abs(temp)));
     temp = mean(neur(sessix).singleProj(start:stop,:),1,'omitnan');
     neur(sessix).presampAvg = temp./(max(abs(temp)));
end

%% Make a scatter plot for each session of CDCont vs MOVE-CDCont during presample period on each trial
R2_all = [];
ngroups = 20;
mkrsize = 7;
for sessix = 1:length(meta)
    % Sort MoveCDCont and CDCont in ascending order
    [move,sortix] = sort(regr(sessix).presampAvg,'ascend');
    neural = neur(sessix).presampAvg(sortix);

    nTrials = length(move);
    trixPerGroup = floor(nTrials/ngroups)-1;                  % How many trials you want to be in each group
    
    % Divide the MOVE-CDCont and neural CDCont into nGroups according to
    % the MOVE-CDCont
    decile.Move = NaN(1,ngroups); errbar.Move = NaN(1,ngroups);
    decile.Neur = NaN(1,ngroups); errbar.Neur = NaN(1,ngroups);
    cnt = 1;
    for g = 1:ngroups                                           % For each group...
        if g==ngroups                                           % If its the last group, adjust the group size so that you don't surpass the number of trials
            ixrange = cnt:nTrials;
        else
            ixrange = cnt:(cnt+trixPerGroup);                   % Get which indices correspond to the current group
        end
        % Take the average and find the 95% CI/or SEM for each group
        decile.Move(g) = mean(move(ixrange),'omitnan'); %errbar.Move(g) = 1.96*(std(move(ixrange),0,2,'omitnan'))/(sqrt(length(ixrange)));
        errbar.Move(g) = std(move(ixrange),0,2,'omitnan')./(sqrt(length(ixrange)));
        decile.Neur(g) = mean(neural(ixrange),'omitnan'); %errbar.Neur(g) = 1.96*(std(neural(ixrange),0,2,'omitnan'))/(sqrt(length(ixrange)));
        errbar.Neur(g) = std(neural(ixrange),0,2,'omitnan')./(sqrt(length(ixrange)));
        cnt = cnt+trixPerGroup+1;
    end
    
    % Plot a scatter plot with error bars 
    figure();
    errorbar(decile.Move,decile.Neur,errbar.Neur,errbar.Neur,errbar.Move,errbar.Move,'o','Color','black','MarkerSize',mkrsize,'LineWidth',0.8)
    R2 = corrcoef(decile.Move,decile.Neur);
    R2 = R2(2);
    R2_all = [R2_all, R2];
    R2 = num2str(R2);
    coeff = polyfit(decile.Move,decile.Neur,1);                   % Find the line of best fit
    hline = refline(coeff);
    hline.LineStyle = '--';
    hline.Color = 'k';
    legend('data',['R^2 = ' R2],'Location','best')
    xlabel('MOVE-CDContext')
    ylabel('Neural CDContext')
end
%% Plot a bar plot to show the R2 values for each session
nSessions = length(meta);
anmNames = cell(1,nSessions);                                    % Animal names for each session
for sessix = 1:nSessions
    anmNames{sessix} = meta(sessix).anm;
end
uniqueAnm = unique(anmNames);

exsess = 3;                                                     % The index of the session that you want to be highlighted
markerSize = 60;
figure();
bar(mean(R2_all),'FaceColor',[0.75 0.75 0.75]); hold on;         % Plot the average R2 value across all sessions
for sessix = 1:nSessions
    curranm = anmNames{sessix};                 % Get the name of the animal for this session
    switch curranm                                  % Switch the marker shape depending on which animal is being plotted
        case uniqueAnm{1}
            shape = 'o';
        case uniqueAnm{2}
            shape = '<';
        case uniqueAnm{3}
            shape = '^';
        case uniqueAnm{4}
            shape = 'v';
        case uniqueAnm{5}
            shape = '>';
        case uniqueAnm{6}
            shape = 'square';
    end
    scatter(1,R2_all(sessix),markerSize,'filled',shape,'white','MarkerEdgeColor','black','LineWidth',1); hold on;
end
scatter(1,R2_all(exsess),markerSize,'filled','pentagram','black','MarkerEdgeColor','black','LineWidth',1)
legend([' ',anmNames],'Location','best')
%ylim([0.4 1])
ax = gca;
ax.FontSize = 16;