% SCRIPT FOR RELATING JAW MOVEMENTS TO NEURAL ACTIVITY ON A SESSION BY
% SESSION BASIS

% Will generate a figure for each session:
% Panel A: Heatmap of direction selectivity for all cells recorded in the
% session
% Panel B: Avg Probability of jaw movement throughout the trial
% Panel C: Projections of R and L hit, ~early, 2AFC trials onto choice
% modes found w/ and w/o early move trials
% Panel D: Projections of R and L hit, ~early, 2AFC trials AND
% projections of 2AFC hits with early tongue and jaw movements removed onto
% the 'normal' choice mode
% Panel E: Heatmap of jaw movements on each non-early, 2AFC hit trial
% Panel F: scatter plot of single trial choice mode projections vs. jaw
% velocity

% PARAMS THAT NEED TO BE SET:
% Saving params: 'toSave' --> whether or not to save figures
% Run params: 'earlytrials' --> which method you want to use to identify
% early movement trials
% 'moveThresh' --> what percentage of the delay period you want to be used
% for identifying early move trials 
% 'alignEvent' --> which behavioral event you want to align the PSTHs and
% modes to
%%
clear; clc; close all;

addpath(genpath('C:\Code\ActivityModes'));
addpath(genpath('C:\Code\Uninstructed Movements\Uninstructed-Movements\DataLoadingScripts'));
addpath(genpath('C:\Code\Uninstructed-Movements'));
addpath(genpath('C:\Code\Utils'));


% Saving params
outputdir = 'C:\Users\Jackie\Documents\Grad School\Economo Lab\Figures\Uninstructed Movements';
toSave = 'no';
%% SET RUN PARAMS

% Which method you want to use to identify early movement trials:
% 'motionEnergy' or 'DeepLabCut'
params.earlytrials         =  'motionEnergy'; 
params.moveThresh          = 0.15;      % What percentage of the delay period you want to use for identifying early move trials
params.alignEvent          = 'goCue';   % goCue or firstLick
params.lowFR               = 1; % remove clusters firing less than this val
params.dt = 0.05;

% set conditions to use for projections
params.condition(1) = {'R&hit&~stim.enable&autowater.nums==2&~early'}; % right hits, no stim, aw off
params.condition(2) = {'L&hit&~stim.enable&autowater.nums==2&~early'}; % left hits, no stim, aw off
params.condition(3) = {'R&miss&~stim.enable&autowater.nums==2&~early'};   % error right, no stim, aw off
params.condition(4) = {'L&miss&~stim.enable&autowater.nums==2&~early'};   % error left, no stim, aw off
params.condition(5) = {'R&hit&~stim.enable&autowater.nums==1&~early'}; % right hits, no stim, aw on
params.condition(6) = {'L&hit&~stim.enable&autowater.nums==1&~early'}; % left hits, no stim, aw on
params.condition(7) = {'~hit&~miss&~stim.enable&autowater.nums==2&~early'}; % ignore, 2afc, no stim


% set conditions used for finding the modes
aw = '2'; % 1-on, 2-off
stim = '0'; % 0-off
params.modecondition(1) = {['R&hit&autowater.nums==' aw '&stim.num==' stim '&~early']};     % R hits, 2afc, stim on/off, not early
params.modecondition(2) = {['L&hit&autowater.nums==' aw '&stim.num==' stim '&~early']};     % L hits, 2afc, stim on/off, not early
params.modecondition(3) = {['R&miss&autowater.nums==' aw '&stim.num==' stim '&~early']};    % R miss, 2afc, stim on/off, not early
params.modecondition(4) = {['L&miss&autowater.nums==' aw '&stim.num==' stim '&~early']};    % L miss, 2afc, stim on/off, not early
params.modecondition(5) = {['hit&autowater.nums==' aw '&stim.num==' stim '&~early']};       % All hits, 2afc, stim on/off, not early
params.modecondition(6) = {['hit&autowater.nums==1&stim.num==' stim '&~early']};        % All hits, aw on, stim on/off, not early

clrs = cell(1,4);
clrs{1} = [0 0 1];  % Blue = hit, 2AFC, R
clrs{2} = [1 0 0];  % Red = hit, 2AFC, L
clrs{3} = [0.5 0.5 1];    % Light blue = (for R choice mode w/ early trials removed)
clrs{4} = [1 0.5 0.5];    % Light red = (for L choice mode w/ early trials removed)

%% SET METADATA FROM ALL RELEVANT SESSIONS/ANIMALS
meta = [];
% meta = loadJEB4_ALMVideo(meta);
% meta = loadJEB5_ALMVideo(meta);
% meta = loadJEB6_ALMVideo(meta);
meta = loadJEB7_ALMVideo(meta);
%meta = loadEKH1_ALMVideo(meta);
% meta = loadEKH3_ALMVideo(meta);
% meta = loadJGR2_ALMVideo(meta);
% meta = loadJGR3_ALMVideo(meta);

taxis = meta(end).tmin:meta(end).dt:meta(end).tmax;   % get time-axis with 0 as time of event you aligned to
taxis = taxis(1:end-1);
%% PREPROCESS DATA
objs = loadObjs(meta);

for i = 1:numel(meta)
    obj = objs{i};
    obj.condition = params.condition;
    % get trials and clusters to use
    meta(i).trialid = findTrials(obj, obj.condition);   % Get which trials pertain to the behavioral conditions you are looking at
    cluQuality = {obj.clu{meta(i).probe}(:).quality}';  % Get clusters that are of the qualities that you specified
    meta(i).cluid = findClusters(cluQuality, meta(i).quality);
    % align data
    obj = alignSpikes(obj,meta(i),params);              % Align the spike times to the event that you specified 
    % get trial avg psth, single trial data, and single trial data grouped
    % by condition (aka R 2AFC, R AW, etc.)
    obj = getPSTHs(obj,meta(i));                          
    objs{i} = obj;
end

[multi_psth,fromsess] = concatPSTH(objs);                          % Concatenate the trial-averaged PSTHs from all sessions into one structure 
%% ACTIVITY MODES

for gg = 2:length(meta)         % For all loaded sessions...
    f = figure(gg);
    f.WindowState = 'maximized';
    obj = objs{gg};
    met = meta(gg);

    anm = obj.pth.anm;                  % Animal name
    date = obj.pth.dt;                  % Session date
    probenum = string(met.probe);       % Which probe was used  
    sesstitle = strcat(anm,{'   '},date,' ;  ','Probe ',{'   '},probenum);  % Name/title for session

    
    clear rez; clear removeEarly, clear reg
    
    rez.time = objs{1}.time;
    rez.condition = objs{1}.condition;
    rez.alignEvent = params.alignEvent;

    % FIND EARLY MOVEMENT TRIALS(early move trial if moving more than 15% of delay period)
    if strcmp(params.earlytrials,'DeepLabCut')
        % Using deeplabcut to find tongue and jaw movements during delay
        obj = findEarlyMoveTrials(obj);
    elseif strcmp(params.earlytrials,'motionEnergy')
        % Using motion energy to define moving/not moving
        [met,mov] = assignEarlyTrials(obj,met,params);
        obj.earlyMoveix = mov.earlyMoveTrial;

    end


    % PANEL A: Heat-map of R/L selectivity for all cells
    subplot(3,2,1)
    numCells = size(obj.psth,2);
    smooth = 50;

    selectNorm = findDirectionSelectivity(obj, 'obj.psth',smooth);          % Find direction selectivity

    alignEv = find(taxis == 0);                          % t = 0 (Event that everything is aligned to)
    earlyDelay = find(taxis>=-0.65, 1, 'first');     % t = 0.65 s before alignEvent
    lateDelay = find(taxis>=-0.25, 1, 'first');      % t = 0.25 s before alignEvent
    sort_by = lateDelay;          % Which event/epoch you want to sort the heatmap by (choose from defined times above)
    [selectNorm,sIx] = sortSelectivity(selectNorm,sort_by,'first',[]);

    plotSelectivityHeatmap(taxis,sort_by,numCells,selectNorm)       % Plot heatmap for direction selectivity (for all cells in the session)
    ylabel('Neuron #','FontSize',18)
    xlabel('Time since go cue (s)','FontSize',18)
    ax = gca;
    ax.FontSize = 14;
    title('Direction selectivity (R - L)','FontSize',18)
    hold off;


    % PANEL B: PLOT PROB OF JAW MOVEMENT ACROSS TRIAL FOR R AND L HITS
    subplot(3,2,2)
    conditions = {1,2};
    colors = {[0 0 1],[1 0 0],[0.5 0.5 1],[1 0.5 0.5]};
    plotJawProb_SessAvg(obj,met,conditions,colors)
    legend('Right','Left')


    % PANEL C: CHOICE MODE WITH AND WITHOUT EARLY MOVEMENT TRIALS
    % Find two different choice modes: 1) Nuo Li's choice mode; 2) Choice
    % mode calculated without any early movement trials
    % Project all 2AFC ~early hits onto those two modes

    % Find all modes when early trials are and are not included
    allModes = calcAllModes(obj,met,rez,params,'no');
    allModes_NoMove = calcAllModes(obj,met,rez,params,'yes');

    % Which conditions to project onto the modes
    conditions = [1,2];         % Left and right 2AFC hits (not early)
    smooth = 61;
    [allModes,allModes_NoMove] = getChoiceModeProjections_twoModes(obj,allModes,allModes_NoMove,smooth,conditions);

    % Plot the R and L hits onto the two choice modes (found w/ and w/o
    % early move trials) 
    if ~isempty(allModes.latentChoice) && ~isempty(allModes_NoMove.latentChoice)
        subplot(3,2,3)
        colors = {[0 0 1],[1 0 0],[0.5 0.5 1],[1 0.5 0.5]};
        lw = 2;
        plot(rez.time,allModes.latentChoice{1},'Color',colors{1},'LineWidth',2)
        hold on
        plot(rez.time,allModes.latentChoice{2},'Color',colors{2},'LineWidth',2)
        plot(rez.time,allModes_NoMove.latentChoice{1},'Color',colors{3},'LineWidth',2)
        plot(rez.time,allModes_NoMove.latentChoice{2},'Color',colors{4},'LineWidth',2)
        legend('Right','Left','R no early','L no early')
        title('Remove early move trials from choice mode','FontSize',14)
        xlabel('Time since go-cue (s)','FontSize',13)
        ylabel('Choice Mode (a.u.)','FontSize',13)
        xlim([-2.5 2.5])
    end


    % PANEL D: PROJECT NO-EARLYMOVE TRIALS ONTO REGULAR CHOICE MODE
    % Take the 'normal' choice mode.  Project two sets of trials onto it:
    % 1) All 2AFC hits; 2) 2AFC hits with early movement trials removed 

    subplot(3,2,4)
    obj = removeEarlyTrials_PSTH(obj,met,params);              % Get trial PSTHs by condition, excluding early move trials
    [Reg_projection] = getChoiceModeProjections_oneMode(obj,allModes,smooth,conditions);      % Project all trials and non-early move trials onto same choice mode

    if ~isempty(Reg_projection.ALLTrix) && ~isempty(Reg_projection.NOEarly)
        colors = {[0 0 1],[1 0 0],[0 0 0.75],[0.75 0 0]};
        lw = 2;
        plot(rez.time,Reg_projection.ALLTrix{1},'Color',colors{1},'LineWidth',2)
        hold on
        plot(rez.time,Reg_projection.ALLTrix{2},'Color',colors{2},'LineWidth',2)
        plot(rez.time,Reg_projection.NOEarly{1},'Color',colors{3},'LineWidth',2)
        plot(rez.time,Reg_projection.NOEarly{2},'Color',colors{4},'LineWidth',2)
        legend('Right','Left','R no early','L no early')
        title('Remove early move trials from projection','FontSize',14)
        xlabel('Time since go-cue (s)','FontSize',13)
        ylabel('Choice Mode (a.u.)','FontSize',13)
        xlim([-2.5 2.5])
    end


    % PANEL E: HEATMAP OF JAW MOVEMENTS THROUGHOUT SESSION
    % Plotting 2AFC hit trials, ~early
    
    % Find the jaw velocity at all time points in the session
    jaw = findJawVelocity(taxis, obj);

    conditions = {1,2};
    subplot(3,2,5)
    JawVelHeatmap(conditions,jaw,taxis,met)

    
    % PANEL F: SINGLE-TRIAL CHOICE MODE (rez) VS. JAW VELOCITY
    % This choice mode is found using R and L hits and misses 
      
    % Project single trials onto choice mode
    cd = allModes.choice_mode;
    lat_choice = getTrialLatents(obj,cd);

    % Define time intervals: Time frame for late delay period(from -0.4 before go-cue to -0.1)
    late_start = find(taxis>=-0.4, 1, 'first');
    late_stop = find(taxis<=-0.1, 1, 'last');
    lateDelay = late_start:late_stop;

    % Get jaw velocity and activity mode averages for late delay
    timeInt = lateDelay;
    jawVel_late = getAverages(timeInt,jaw);
    Choice_late = getAverages(timeInt,lat_choice);

    % Make scatter plot
    conditions = 1:2;               % Look only at correct left and right hits during 2AFC
    subplot(3,2,6)
    [coeff,R] = ActivityMode_Jaw_Scatter(jawVel_late,Choice_late,conditions,met,clrs,obj,params);
    hline = refline(coeff);
    hline.LineStyle = '--';
    hline.Color = 'k';
    lgd = legend('Right','Right early move','Left','Left early move','');
    lgd.FontSize = 9;
    lgd.Location = 'best';
    str = strcat('R^2 =',R);
    title(str,'fontsize',13)
    xlabel('Avg Jaw Velocity','fontsize',14)
    ylabel('Avg choice mode','fontsize',14)


    sgtitle(sesstitle,'FontSize',16)

    % Save the figure to the output directory
    if strcmp(toSave,'yes')
        saveas(gcf,fullfile(outputdir,sesstitle),'jpeg')
        close all
    end
end

% Find the mean jaw velocity on each trial during a given time period 

lastlick = zeros(size(jaw, 2), 1);
for i = 1:size(jaw, 2)
    
    licks = sort([obj.bp.ev.lickR{i} obj.bp.ev.lickL{i}]);
    if isempty(licks)
        lastlick(i) = 0;
    else
    lastlick(i) = licks(end);
    end
end


val = nanmean(jaw(60:90, :), 1);  
% val = lastlick;
[~, ix] = sort(val, 'descend'); 


Ntrials = numel(ix);
Ngroups = 5;
trialsPerGroup = floor(Ntrials/Ngroups);
group = ceil(ix/trialsPerGroup);
group(group>Ngroups) = Ngroups;
clrs = colormap(jet(Ngroups));

groupsToPlot = [1 5];


% Sort the mean jaw velocity and save the order in which the trials are saved
    
figure; hold on;
for i = 1:Ntrials                 % For 1:nTrials...
%   c = [ix(i)./max(ix) 0 1-ix(i)./max(ix)];
    c = clrs(group(i), :);                          % Choose a color based on the order of the trial
    if ismember(group(i), groupsToPlot)
        plot(medfilt1(lat_choice(:, i), 151), 'Color', c, 'LineWidth', 1.5);  % Plot the single trial projections onto the choice mode,
    end
end

figure; hold on;
for i = 1:Ngroups                 % For 1:nTrials...
    c = clrs(i, :);                          % Choose a color based on the order of the trial
    if ismember(i, groupsToPlot)
        ts = nanmean(medfilt1(lat_choice(:, ismember(group, i)), 25), 2);
        plot(ts, 'Color', c, 'LineWidth', 3);
    end
    
end



figure; imagesc(lat_choice(:, ix)');
figure; imagesc(jaw(:, ix)'); caxis([0 5]);




% 
% 
% 
% 
% jv = jaw;
% jv(jv>10) = 10;
% x = 1:size(jaw, 1);
% figure; hold on; 
% for i = 1:size(lat_choice, 2)
%    scatter(x, medfilt1(lat_choice(:, i), 75),  50, jv(:, i) , '.');   
%     
% end
% 
% 
% lc = medfilt1(lat_choice, 151);
% figure; plot(jv(:), lc(:), '.');
% 
% jvm = nanmean(jaw(60:120, :), 1);
% [~, ix] = sort(jvm, 'descend');


